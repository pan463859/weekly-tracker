(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{687:function(t,s,a){"use strict";a.r(s);var n=a(11),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("本文描述 JavaScript 引擎中通用的一些关键的基础知识——不仅仅是 "),a("a",{attrs:{href:"https://twitter.com/v8js",target:"_blank",rel:"noopener noreferrer"}},[t._v("V8"),a("OutboundLink")],1),t._v("。作为一名 JavaScript 开发人员，对 JavaScript 引擎的工作原理深入了解一下有助于你更好的编写代码。")]),t._v(" "),a("p",[a("strong",[t._v("如果你没有看"),a("a",{attrs:{href:"https://github.com/FEDarling/weekly-tracker/blob/master/JavaScript_Weekly/399/js_engine_shape_and_inline_caches.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("之前的文章：JavaScript 引擎基础(上)：形态和内联缓存"),a("OutboundLink")],1),t._v("，请务必看下，本篇有很多相关名词在前文都有介绍。")])]),t._v(" "),a("p",[t._v("之前的文章，我们讨论了 JavaScript 引擎如何通过使用 "),a("strong",[t._v("Shape")]),t._v(" 和 "),a("strong",[t._v("内联缓存")]),t._v(" 来优化对象和数组访问。本文来说一下如何优化 管道(pipeline) 的权衡，并会讲述引擎如何加快对原型属性的访问。")]),t._v(" "),a("h2",{attrs:{id:"优化层级和执行权衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化层级和执行权衡"}},[t._v("#")]),t._v(" 优化层级和执行权衡")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/FEDarling/weekly-tracker/blob/master/JavaScript_Weekly/399/js_engine_shape_and_inline_caches.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("之前的文章"),a("OutboundLink")],1),t._v("讨论了现代 JavaScript 引擎如何拥有相同的管道：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220113220830.png",alt:""}})]),t._v(" "),a("p",[t._v("我们还提出了，虽然引擎之间的高层管道有点类似，但优化管道这方面往往存在差异。这是为什么？为什么有些引擎比其他引擎有更多的优化层级？事实证明，在运行代码的最快速度和最佳性能之间存在着某种权衡：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114004905.png",alt:""}})]),t._v(" "),a("p",[t._v("解释器可以快速生成字节码，但字节码通常效率不高。另一方面，优化编译器需要花更长的时间执行，不过最终会产生更高效的机器代码。")]),t._v(" "),a("p",[t._v("这正是 V8 使用的模型。 V8 的解释器称为 "),a("strong",[t._v("火花塞(Ignition)")]),t._v("，它是所有引擎中最快的解释器（就原始字节码执行速度而言）。 V8 的优化编译器名为 "),a("strong",[t._v("涡轮风扇(TurboFan)")]),t._v("，它最终会生成高度优化的机器代码：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114005049.png",alt:""}})]),t._v(" "),a("p",[t._v("启动延迟和执行速度之间的权衡是一些 JavaScript 引擎选择在两者之间添加优化层的原因。例如，SpiderMonkey 在解释器和 IonMonkey 优化编译器之间添加了一个基准层：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114005201.png",alt:""}})]),t._v(" "),a("p",[t._v("解释器快速生成字节码，但字节码执行速度相对较慢。 Baseline 生成代码虽然需要更长的时间，但它提供了更好的运行时性能。最后，IonMonkey 优化编译器生成机器代码的时间最长，不过该代码可以非常高效地运行。")]),t._v(" "),a("p",[t._v("让我们看一个具体的例子，看看不同引擎中的管道如何处理它。这是一些在热循环中经常重复的代码：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4242424242")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("V8 开始在 "),a("strong",[t._v("火花塞(Ignition)")]),t._v(" 解释器中运行字节码。在某个时刻，引擎确定代码达到了 hot 的程度，并启动 "),a("strong",[t._v("涡轮风扇(TurboFan)")]),t._v("，这是 "),a("strong",[t._v("涡轮风扇(TurboFan)")]),t._v(" 处理集成分析数据和构建代码的基本机器表示的部分。然后将其发送到不同线程上的 "),a("strong",[t._v("涡轮风扇(TurboFan)")]),t._v(" 优化器以进行进一步改进：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114005434.png",alt:""}})]),t._v(" "),a("p",[t._v("当优化器运行时，V8 继续在 "),a("strong",[t._v("火花塞(Ignition)")]),t._v(" 中执行字节码。在某些时候优化器完成了，我们有了可执行的机器代码，并且可以继续执行。")]),t._v(" "),a("blockquote",[a("p",[t._v("从 Chrome 91（2021 年发布）开始，V8 在 Ignition 解释器和 TurboFan 优化编译器之间增加了一个名为 Sparkplug 的编译器。")])]),t._v(" "),a("p",[t._v("SpiderMonkey 引擎也开始在解释器中运行字节码。但它有额外的基准层，这意味着热代码首先发送到基准层，基准编译器在主线程上生成基准代码并在准备好后继续执行。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114005609.png",alt:""}})]),t._v(" "),a("p",[t._v("基准代码运行一段时间后，SpiderMonkey 最终会启动 IonMonkey，并启动优化器 — 这与 V8 非常相似。在 IonMonkey 进行优化时，它会继续在基准层中运行。最后，当优化器完成时，将会执行优化代码而不是基准代码。")]),t._v(" "),a("p",[t._v("Chakra 的架构与 SpiderMonkey 的架构非常相似，但 Chakra 会尝试同时运行更多的东西以避免阻塞主线程。 Chakra 没有在主线程上运行编译器的任何部分，而是复制出编译器可能需要的字节码和数据，并将其发送到专用的编译器进程：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114005732.png",alt:""}})]),t._v(" "),a("p",[t._v("当生成的代码准备好后，引擎开始运行这个 SimpleJIT 代码而不是字节码。 FullJIT 也是如此。这种方法的好处是，与运行 FullJIT 编译器相比，复制发生的暂停时间通常要短得多。但这种方法的缺点是这种复制可能会遗漏某些优化所需的信息，因此它会在某种程度上降低代码质量来换取延迟。")]),t._v(" "),a("p",[t._v("在 JavaScriptCore 中，所有优化编译器与主线程 JavaScript "),a("strong",[t._v("完全并发")]),t._v(" 运行，注意！这里没有复制！相反，主线程仅触发另一个线程上的编译作业。然后编译器使用复杂的锁定方案从主线程访问分析数据：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114010056.png",alt:""}})]),t._v(" "),a("p",[t._v("这种方法的优点是它减少了由于 JavaScript 优化在主线程上引起的卡顿，缺点是它需要处理复杂的多线程问题并为各种操作付出一些锁定的成本。")]),t._v(" "),a("p",[t._v("到这里为止，我们已经讨论了使用解释器快速生成代码或使用优化编译器生成快速代码之间的权衡。但是还有另一个权衡："),a("strong",[t._v("内存使用")]),t._v("！为了说明这一点，下面是一个代码例子，它将两个数字相加：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("这是我们使用 V8 中的 Ignition 解释器为 add 函数生成的字节码：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("StackCheck\nLdar a1\nAdd a0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nReturn\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[a("strong",[t._v("不用完全看懂字节码")]),t._v("，可以简单看出它只有四个指令。")]),t._v(" "),a("p",[t._v("当代码状态变成 hot 时，TurboFan 会生成以下高度优化的机器码：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("leaq rcx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rip"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nmovq rcx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rcx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x37")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\ntestb "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rcx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1")]),t._v("\njnz CompileLazyDeoptimizedCode\npush rbp\nmovq rbp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("rsp\npush rsi\npush rdi\ncmpq rsp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r13"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xe88")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\njna StackOverflow\nmovq rax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rbp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\ntest al"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1")]),t._v("\njnz Deoptimize\nmovq rbx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rbp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\ntestb rbx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1")]),t._v("\njnz Deoptimize\nmovq rdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("rbx\nshrq rdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v("\nmovq rcx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("rax\nshrq rcx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v("\naddl rdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("rcx\njo Deoptimize\nshlq rdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v("\nmovq rax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("rdx\nmovq rsp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("rbp\npop rbp\nret "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x18")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br")])]),a("p",[t._v("哇，好多字节码！一般来说，字节码往往比机器码更紧凑，尤其是优化的机器码。另一方面，字节码需要解释器才能运行，而优化后的代码可以直接由处理器执行。")]),t._v(" "),a("p",[t._v("这也是为什么 JavaScript 引擎不只有“优化所有代码”。正如我们之前看到的，生成优化的机器码需要很长时间，最重要的是，我们刚刚了解到 "),a("strong",[t._v("优化的机器码也需要更多的内存")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114010613.png",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("简介： JavaScript 引擎具有很多的优化层的原因是因为需要使用解释器快速生成代码，也需要使用优化编译器生成快速代码。这是一个范围化的东西，添加更多优化层可以让你从 "),a("strong",[t._v("额外的复杂性/开销")]),t._v(" 和 "),a("strong",[t._v("更细粒度的决策")]),t._v(" 之间做出自己的选择。此外，"),a("strong",[t._v("优化的级别")]),t._v(" 和 "),a("strong",[t._v("生成代码的内存使用")]),t._v(" 之间也存在权衡。这就是 JavaScript 引擎尝试 "),a("strong",[t._v("只优化热函数(hot function)")]),t._v(" 的原因。")])]),t._v(" "),a("h2",{attrs:{id:"优化原型属性访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化原型属性访问"}},[t._v("#")]),t._v(" 优化原型属性访问")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/FEDarling/weekly-tracker/blob/master/JavaScript_Weekly/399/js_engine_shape_and_inline_caches.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("之前的文章"),a("OutboundLink")],1),t._v(" 解释了 JavaScript 引擎如何使用 Shapes 和 IC 优化对象属性加载。回顾一下，引擎将对象的 Shape 与 对象的值 分开存储：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114011019.png",alt:""}})]),t._v(" "),a("p",[t._v("Shapes 支持一种称为 "),a("strong",[t._v("行内缓存(Inline Caches，IC)")]),t._v(" 的优化。结合起来，Shapes 和 IC 可以加快代码中同一位置的重复属性访问。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114011207.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"类-classes-和基于原型-prototype-的编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类-classes-和基于原型-prototype-的编程"}},[t._v("#")]),t._v(" 类(Classes)和基于原型(prototype)的编程")]),t._v(" "),a("p",[t._v("现在我们知道了如何在 JavaScript 对象上快速访问属性，让我们看看 JavaScript 中最近添加的一个：类(Classes)。 JavaScript 类语法如下所示：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("尽管这似乎是 JavaScript 中的一个新概念，但它只是基于原型的编程的语法糖，一直在 JavaScript 中使用：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getX")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("在这里，我们在 "),a("code",[t._v("Bar.prototype")]),t._v(" 对象上分配了一个 "),a("code",[t._v("getX")]),t._v(" 属性。这与任何其他对象的工作方式完全相同，因为原型也只是 JavaScript 中的对象！在 JavaScript 等一系列基于原型的编程语言中，方法通过原型共享，而字段存储在具体的实例中。")]),t._v(" "),a("p",[t._v("当我们创建一个名为 "),a("code",[t._v("foo")]),t._v(" 的新 "),a("code",[t._v("Bar")]),t._v(" 实例时，看看幕后发生了什么：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("运行上面的代码创建的实例具有单个属性 "),a("code",[t._v("“x”")]),t._v(" 的 Shape。 "),a("code",[t._v("foo")]),t._v(" 的原型是 "),a("code",[t._v("Bar")]),t._v(" 类的 "),a("code",[t._v("Bar.prototype")]),t._v("：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114011543.png",alt:""}})]),t._v(" "),a("p",[a("code",[t._v("Bar.prototype")]),t._v(" 有它自己的 Shape，包含一个属性 "),a("code",[t._v("“getX”")]),t._v("，属性的值是函数 "),a("code",[t._v("getX")]),t._v("，它在调用时只返回 "),a("code",[t._v("this.x")]),t._v("。 "),a("code",[t._v("Bar.prototype")]),t._v(" 的原型是 JavaScript 语言的 "),a("code",[t._v("Object.prototype")]),t._v("。"),a("code",[t._v("Object.prototype")]),t._v(" 是原型树的根，因此它的原型为 "),a("code",[t._v("null")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114011752.png",alt:""}})]),t._v(" "),a("p",[t._v("如果你创建了另一个类的另一个实例，则两个实例都在我们之前讨论的情况下共享对象 Shape：两个实例都指向同一个 "),a("code",[t._v("Bar.prototype")]),t._v(" 对象。")]),t._v(" "),a("h3",{attrs:{id:"原型属性访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型属性访问"}},[t._v("#")]),t._v(" 原型属性访问")]),t._v(" "),a("p",[t._v("好的，现在我们知道当我们定义一个类并创建一个新的实例时会发生什么。但是如果我们在实例上调用方法又会发生什么呢？")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        ^^^^^^^^^^")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("我们把它拆分一下：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其实就是两步")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" $getX "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$getX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("第 1 步是加载方法，它只是原型上的一个属性（其值恰好是一个函数），第 2 步是以值为 "),a("code",[t._v("this")]),t._v(" 的实例调用函数。让我们来看看第一步，即从实例 "),a("code",[t._v("foo")]),t._v(" 加载方法 "),a("code",[t._v("getX")]),t._v("：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114012125.png",alt:""}})]),t._v(" "),a("p",[t._v("引擎从 "),a("code",[t._v("foo")]),t._v(" 实例开始，并发现 "),a("code",[t._v("foo")]),t._v(" 的 Shape 上没有 "),a("code",[t._v("'getX'")]),t._v(" 属性，因此它必须遍历原型链。我们到达 "),a("code",[t._v("Bar.prototype")]),t._v("，查看它的原型 Shape，看到它在 offset "),a("code",[t._v("0")]),t._v(" 处具有 "),a("code",[t._v("“getX”")]),t._v(" 属性。我们在 "),a("code",[t._v("Bar.prototype")]),t._v(" 中查找此 offset 处的值，并找到我们正在寻找的 "),a("code",[t._v("JSFunction getX")]),t._v("。整个过程就是这样！")]),t._v(" "),a("p",[t._v("JavaScript 可以用自己特有的灵活性改变原型链链接，例如：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfoo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// → true")]),t._v("\n\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfoo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// → Uncaught TypeError: foo.getX is not a function")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("在这个例子中，我们调用了 "),a("code",[t._v("foo.getX()")]),t._v(" 两次，但每次它的含义和结果都完全不同。这就是为什么？虽然原型只是 JavaScript 中的对象，但对于 JavaScript 引擎来说，加速原型属性访问比加速常规对象上自己的属性访问更有难度。")]),t._v(" "),a("p",[t._v("看看这个代码，加载原型属性是一个非常频繁的操作：每次调用方法时都会发生！")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        ^^^^^^^^^^")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("之前，我们讨论了引擎如何通过使用 Shape 和 内联缓存 来优化加载常规的、自己的属性。那我们如何优化重复加载具有相似 Shape 的对象的原型属性？上面的图中我们看到了属性加载是如何发生的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114012605.png",alt:""}})]),t._v(" "),a("p",[t._v("为了在这种特殊情况下加快重复加载速度，我们需要知道这三点：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("foo")]),t._v(" 的 Shape 不包含 "),a("code",[t._v("'getX'")]),t._v(" 并且没有做改变。这意味着没有人通过添加、删除或更改属性来更改对象 "),a("code",[t._v("foo")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("foo")]),t._v(" 的原型仍然是最初的 "),a("code",[t._v("Bar.prototype")]),t._v("。这意味着没有人通过使用 "),a("code",[t._v("Object.setPrototypeOf()")]),t._v(" 或设置特殊的 "),a("code",[t._v("__proto__")]),t._v(" 属性来更改 "),a("code",[t._v("foo")]),t._v(" 原型。")]),t._v(" "),a("li",[a("code",[t._v("Bar.prototype")]),t._v(" 的 Shape 包含 "),a("code",[t._v("“getX”")]),t._v(" 并且没有做改变。这意味着没有人通过添加、删除、或更改属性之来修改 "),a("code",[t._v("Bar.prototype")]),t._v("。")])]),t._v(" "),a("p",[t._v("在一般情况下，这意味着我们必须对实例本身执行 1 次检查，再加上每个原型的 2 次检查，直到拥有我们正在寻找的属性的原型。 1+2N 检查（N 是涉及的原型的数量）在这种情况下可能听起来并不算太坏，因为原型链相对较浅 — 但引擎通常必须处理更长的原型链，例如在常见 DOM 的情况下类。就像下面这个例子：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" anchor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// → HTMLAnchorElement")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" title "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" anchor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAttribute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'title'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("我们有一个 "),a("code",[t._v("HTMLAnchorElement")]),t._v(" 并在其上调用 "),a("code",[t._v("getAttribute()")]),t._v(" 方法。这已经涉及到 6 个原型！大多数好用的 DOM 方法不在直接的 "),a("code",[t._v("HTMLAnchorElement")]),t._v(" 原型上，而是在链的更高层：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114013048.png",alt:""}})]),t._v(" "),a("p",[a("code",[t._v("getAttribute()")]),t._v(" 方法可以在 "),a("code",[t._v("Element.prototype")]),t._v(" 上找到。这意味着每次我们调用 "),a("code",[t._v("anchor.getAttribute()")]),t._v(" 时，JavaScript 引擎需要做.....")]),t._v(" "),a("ol",[a("li",[t._v("检查 "),a("code",[t._v("“getAttribute”")]),t._v(" 是否不在 "),a("code",[t._v("anchor")]),t._v(" 对象本身上")]),t._v(" "),a("li",[t._v("检查直接原型是 "),a("code",[t._v("HTMLAnchorElement.prototype")])]),t._v(" "),a("li",[t._v("确定那里没有“"),a("code",[t._v("getAttribute”")])]),t._v(" "),a("li",[t._v("检查下一个原型是"),a("code",[t._v("HTMLElement.prototype")])]),t._v(" "),a("li",[t._v("确定那里也没有 "),a("code",[t._v("“getAttribute”")])]),t._v(" "),a("li",[t._v("最终检查下一个原型是 "),a("code",[t._v("Element.prototype")])]),t._v(" "),a("li",[t._v("并且那里存在 "),a("code",[t._v("“getAttribute”")])])]),t._v(" "),a("p",[t._v("总共有 "),a("strong",[t._v("7")]),t._v(" 次检查！这种代码在网络上很常见，引擎会应用一些技巧来减少原型上属性加载所需的检查次数。")]),t._v(" "),a("p",[t._v("再回到前面的例子，我们在 "),a("code",[t._v("foo")]),t._v(" 上访问 "),a("code",[t._v("'getX'")]),t._v(" 时总共执行了 3 次检查：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" $getX "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("每个携带该属性的原型对象，都需要进行 Shape 检查以查找是否缺失。如果我们可以通过把 "),a("strong",[t._v("原型检查")]),t._v(" 变成 "),a("strong",[t._v("缺勤检查")]),t._v("， 以此来减少检查次数，那就太棒了。本质上这就是引擎使用了一个简单技巧做的事情：引擎不是将原型链存储在实例本身上，而是将其存储在 "),a("strong",[t._v("Shape")]),t._v(" 中。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114014249.png",alt:""}})]),t._v(" "),a("p",[t._v("每个 Shape 都指向了原型。这也意味着每次 "),a("code",[t._v("foo")]),t._v(" 的原型发生变化时，引擎都会转换为新的 Shape。现在我们只需要检查一个对象的 Shape 来断言某些属性是否缺失并保护原型链接。")]),t._v(" "),a("p",[t._v("通过这种方法，我们可以将所需的检查次数从 "),a("strong",[t._v("1+2N")]),t._v(" 减少到 1+N，从而更快地访问原型的属性。但这种方式代价也不小，原型链越长，代价也越高。引擎实现了不同的技巧来进一步减少检查的数量，特别是对于相同属性加载的后续执行。")]),t._v(" "),a("h3",{attrs:{id:"有效单元格-validitycell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有效单元格-validitycell"}},[t._v("#")]),t._v(" 有效单元格(ValidityCell)")]),t._v(" "),a("p",[t._v("V8 专门为这种原型 Shape 做处理。每个原型都有一个独特的 Shape，它不与任何其他对象共享（特别是不与其他原型共享），并且这些原型 Shape 中的每一个都有一个与之关联的特殊的 "),a("strong",[t._v("有效单元格(ValidityCell)")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114014721.png",alt:""}})]),t._v(" "),a("p",[t._v("每当有人更改相关原型或它上面的任何原型时，此 ValidityCell 都会失效。让我们来看看它是如何工作的。")]),t._v(" "),a("p",[t._v("为了加快原型的后续加载，V8 放置了一个内联缓存，其中包含四个字段：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114014830.png",alt:""}})]),t._v(" "),a("p",[t._v("在这段代码的第一次运行到预热内联缓存时，V8 会记住在原型中找到属性的 offset、找到属性的原型（当前是 "),a("code",[t._v("Bar.prototype")]),t._v("）、实例的 Shape（当前是 foo 的 Shape），以及从实例 Shape 链接到的直接原型的当前 ValidityCell 的链接（当前是 "),a("code",[t._v("Bar.prototype")]),t._v(" ）。")]),t._v(" "),a("p",[t._v("下次命中内联缓存时，引擎必须检查实例的 Shape 和 ValidityCell。如果它仍然有效，引擎可以直接访问原型上的 offset，跳过额外的查找：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114015217.png",alt:""}})]),t._v(" "),a("p",[t._v("当原型发生变化时，分配一个新的 Shape，之前的 ValidityCell 就失效了。所以 Inline Cache 在下次执行时会丢失，导致性能变差。")]),t._v(" "),a("p",[t._v("回到之前的 DOM 元素示例，这意味着对 "),a("code",[t._v("Object.prototype")]),t._v(" 来说，不仅会使 "),a("code",[t._v("Object.prototype")]),t._v(" 本身的内联缓存失效，还会使下面的任何原型失效，包括 "),a("code",[t._v("EventTarget.prototype")]),t._v("、"),a("code",[t._v("Node.prototype")]),t._v("、"),a("code",[t._v("Element.prototype")]),t._v(" 等，一直到 "),a("code",[t._v("HTMLAnchorElement.prototype")]),t._v("：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/daodaolee/photobed@main/img/20220114015338.png",alt:""}})]),t._v(" "),a("p",[t._v("实际上，在运行代码时修改 "),a("code",[t._v("Object.prototype")]),t._v(" 意味着优先不考虑性能。尽量不要这样做！")]),t._v(" "),a("p",[t._v("让我们通过一个具体的例子来进一步探讨这一点。假设我们有我们的类 "),a("code",[t._v("Bar")]),t._v("，并且我们有一个函数 "),a("code",[t._v("loadX")]),t._v("，它调用 "),a("code",[t._v("Bar")]),t._v(" 对象的方法。我们用同一个类的实例多次调用这个 loadX 函数：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* … */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Bar 实例上的 getX 的 IC。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// loadX 中的 IC 现在为 Bar.prototype 链接 ValidityCell。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("newMethod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// loadX IC中的 ValidityCell 现在无效，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为 Object.prototype 发生了变化。")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("p",[a("code",[t._v("loadX")]),t._v(" 中的内联缓存现在指向 "),a("code",[t._v("Bar.prototype")]),t._v(" 的 ValidityCell。如果你之后做一些像改变 "),a("code",[t._v("Object.prototype")]),t._v(" 之类的事情。ValidityCell 就会失效，并且现有的内联缓存在下次被命中时会丢失，从而导致性能下降。")]),t._v(" "),a("p",[t._v("尽量不要改变 "),a("code",[t._v("Object.prototype")]),t._v(" ，因为它会使引擎在此之前放置的原型加载的任何内联缓存失效。这是另一个错误的例子：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* … */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nsomeObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("我们扩展了 "),a("code",[t._v("Object.prototype")]),t._v("，它使引擎在此之前放置的任何原型内联缓存都失效。然后我们运行一些使用新原型方法的代码。引擎必须从头开始并为所有原型属性访问设置新的内联缓存。最后，我们 “自行清理” 并删除我们之前添加的原型方法。")]),t._v(" "),a("p",[t._v("“自行清理” 看起来不错，但是在这种情况下，它会使情况变得更糟！删除该属性会修改 "),a("code",[t._v("Object.prototype")]),t._v("，因此所有内联缓存都会再次失效，引擎必须再次从头开始。")]),t._v(" "),a("blockquote",[a("p",[t._v("总结：虽然原型只是对象，但它们被 JavaScript 引擎特殊处理，从而优化原型上方法查找的性能。别管你的原型了！或者，如果你真的需要接触原型，那么在其他代码运行之前进行操作，这样你至少不会在代码运行时使引擎中的所有优化无效。")])]),t._v(" "),a("h2",{attrs:{id:"最后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[t._v("#")]),t._v(" 最后")]),t._v(" "),a("p",[t._v("我们已经了解了 JavaScript 引擎如何存储对象和类，以及 Shapes、Inline Caches 和 ValidityCells 如何帮助优化原型操作。基于这些知识，我们确定了一个实用的 JavaScript 编码技巧，可以帮助提高性能：不要弄乱原型（或者如果你真的非常需要，那么至少在其他代码运行之前这样做）。")]),t._v(" "),a("hr"),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("译文出自："),a("a",{attrs:{href:"https://github.com/FEDarling/weekly-tracker",target:"_blank",rel:"noopener noreferrer"}},[t._v("weekly-tracker"),a("OutboundLink")],1),t._v(" 项目，期待你的加入！")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mathiasbynens.be/notes/prototypes",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看原文"),a("OutboundLink")],1),t._v("对比阅读")]),t._v(" "),a("li",[t._v("发现错误？"),a("a",{attrs:{href:"https://github.com/FEDarling/weekly-tracker/blob/main/weeklys/javascript_weekly/399/js_engine_optimizing_prototype.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("提交 PR"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("译者："),a("a",{attrs:{href:"https://github.com/daodaolee",target:"_blank",rel:"noopener noreferrer"}},[t._v("daodaolee"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("校对者："),a("a",{attrs:{href:"https://github.com/daodaolee",target:"_blank",rel:"noopener noreferrer"}},[t._v("daodaolee"),a("OutboundLink")],1)])])])])}),[],!1,null,null,null);s.default=e.exports}}]);